package com.example.manualpassportverify.security;
 
import java.util.List;
 
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.servlet.handler.HandlerMappingIntrospector;
 
import com.example.manualpassportverify.security.jwt.AuthEntryPointJwt;
import com.example.manualpassportverify.security.jwt.AuthTokenFilter;
 
import static org.springframework.security.web.util.matcher.AntPathRequestMatcher.antMatcher;
 
@Configuration
@EnableWebSecurity
@EnableMethodSecurity
public class WebSecurityConfig {
   @Autowired
   private AuthEntryPointJwt authEntryPointjwt;
   @Autowired
   private UserDetailsImpl userDetailsService;
   @Bean
   public AuthTokenFilter authFilter() {return new AuthTokenFilter();};
   @Bean
   CorsConfigurationSource corsConfigurationSource() {
       CorsConfiguration configuration = new CorsConfiguration();
       configuration.addAllowedOriginPattern("*");
       configuration.setAllowedMethods(List.of("*"));
       configuration.setAllowedHeaders(List.of("*"));
       UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
       source.registerCorsConfiguration("/**", configuration);
       return source;
   }
   @Bean
   public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {
       return authConfig.getAuthenticationManager();
   }
   @Bean
   public DaoAuthenticationProvider authenticationProvider() {
       DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
       authProvider.setUserDetailsService(userDetailsService);
       return authProvider;
   }
   @Bean
   MvcRequestMatcher.Builder mvc(HandlerMappingIntrospector introspector) {
       return new MvcRequestMatcher.Builder(introspector);
   }
   @Bean
   public SecurityFilterChain filterChain(HttpSecurity http,MvcRequestMatcher.Builder mvc) throws Exception {
       http.cors(cors -> cors.configurationSource(corsConfigurationSource()))
               .csrf(csrf->csrf.disable())
               .exceptionHandling(exception -> exception.authenticationEntryPoint(authEntryPointjwt))
               .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
               .authorizeHttpRequests((auth) ->auth
            		   .requestMatchers("/api/authenticate","/api/verify","/api/getDetailsByPassportNumber").permitAll()
                               .anyRequest().authenticated()
               );
 
       http.authenticationProvider(authenticationProvider());
       http.addFilterBefore(authFilter(),UsernamePasswordAuthenticationFilter.class);
 
       return http.build();
   }
}

